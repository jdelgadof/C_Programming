#include <stdio.h>
#include "pico/stdlib.h"
#include "pico.h"
#include "hardware/gpio.h"
#include "hardware/pwm.h"

#define LED1 20
#define LED2 21
#define LED3 22
#define ROT_A_PIN 10
#define ROT_B_PIN 11
#define ROT_SW_PIN 12

void create_led(uint led);
void adjust_bright(uint led, int bright);

bool led_state = false;
int brightness = 500;  // Initial brightness 50% (0-1000)

static void a_interrupt_handler(uint gpio, uint32_t event) {
    if(gpio == ROT_A_PIN && gpio_get(ROT_B_PIN)){
        //printf("Anticlockwise\n");
        brightness -= 25;
        if (brightness <= 0) {
            brightness = 0;
        }
    }else{
        //printf("Clockwise\n");
        brightness += 25;
        if (brightness >= 1000) {
            brightness = 1000;
        }
    }
}
int main() {

    create_led(LED1);
    create_led(LED2);
    create_led(LED3);

    gpio_init(ROT_A_PIN);
    gpio_init(ROT_B_PIN);
    gpio_init(ROT_SW_PIN);

    gpio_set_dir(ROT_A_PIN, GPIO_IN);
    gpio_set_dir(ROT_B_PIN, GPIO_IN);
    gpio_set_dir(ROT_SW_PIN, GPIO_IN);
    gpio_set_pulls(ROT_SW_PIN, true, false);  // Enable pull-up for the switch

    gpio_set_irq_enabled_with_callback(ROT_A_PIN, GPIO_IRQ_EDGE_RISE, true, &a_interrupt_handler);

    stdio_init_all();

    while (1) {

        if (gpio_get(ROT_SW_PIN) == 0) {
            while (gpio_get(ROT_SW_PIN) == 0) {
                tight_loop_contents();  // Wait for button release
            }
            if(brightness == 0){
                brightness = 500;
                led_state = false;
            }
            // Toggle LED state
            led_state = !led_state;
            if (led_state) {
                adjust_bright(LED1,brightness);
                adjust_bright(LED2, brightness);
                adjust_bright(LED3, brightness);
            } else {
                adjust_bright(LED1,0);
                adjust_bright(LED2, 0);
                adjust_bright(LED3, 0);
            }
            sleep_ms(10);  // Delay to avoid multiple toggles
            printf("LED state %s\n", led_state ? "ON" : "OFF");
        }
        if (led_state) {
            adjust_bright(LED1,brightness);
            adjust_bright(LED2, brightness);
            adjust_bright(LED3, brightness);
            printf("LED brightness: %d%%\n", brightness/10);
        }
    }
}
void create_led(uint led){
    uint period, freq;
    period = 1000;
    freq = 125; //Division of 125MHz / 1MHz
    uint slice_num = pwm_gpio_to_slice_num(led);
    pwm_config config_led = pwm_get_default_config();
    pwm_config_set_clkdiv_int(&config_led,freq);
    pwm_config_set_wrap(&config_led,period-1); //Set the PWM period
    pwm_set_enabled(slice_num, led);
    pwm_init(slice_num,&config_led,true);
    gpio_set_function(led,GPIO_FUNC_PWM);
}

void adjust_bright(uint led, int bright){
    uint slice, channel;
    slice = pwm_gpio_to_slice_num(led);
    channel = pwm_gpio_to_channel(led);
    pwm_set_chan_level(slice,channel,bright);
}
